package Servlet;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import antlr.collections.List;

import donnees.LieuEntity;

/**
 * Servlet implementation class LieuServlet
 */
public class LieuServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public LieuServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		// Créer l'EntityManagerFactory et l'EntityManager
        EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("AssociationPU");
        EntityManager entityManager = entityManagerFactory.createEntityManager();

        try {
            // Début de la transaction
            entityManager.getTransaction().begin();

            // Exécution de la requête JPA pour obtenir tous les lieux
            List<LieuEntity> lieux = entityManager.createNamedQuery("Lieu.findAll", LieuEntity.class).getResultList();

            // Fin de la transaction
            entityManager.getTransaction().commit();

            // Fermer l'EntityManager et l'EntityManagerFactory
            entityManager.close();
            entityManagerFactory.close();

            // Vous pouvez maintenant utiliser la liste de lieux comme nécessaire
            // (par exemple, la passer à une JSP pour affichage)
            request.setAttribute("lieux", lieux);
            request.getRequestDispatcher("/afficherLieux.jsp").forward(request, response);

        } catch (Exception e) {
            // En cas d'erreur, annuler la transaction et gérer l'exception
            if (entityManager.getTransaction().isActive()) {
                entityManager.getTransaction().rollback();
            }
            e.printStackTrace();
            response.getWriter().println("Erreur : " + e.getMessage());
        } finally {
            // Assurez-vous de fermer l'EntityManager en cas d'erreur
            if (entityManager != null && entityManager.isOpen()) {
                entityManager.close();
            }
        }
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
